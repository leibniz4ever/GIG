package org.eclipse.ptp.gig.log;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.ptp.gig.GIGPlugin;
import org.eclipse.ptp.gig.messages.Messages;
import org.eclipse.ptp.gig.util.GIGUtilities;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.swt.widgets.Widget;
import org.eclipse.ui.statushandlers.StatusManager;

/*
 * This organizes a list of ThreadInfo objects by block then by thread
 */
public class OrganizedThreadInfo {

	private static int threadsPerWarp;

	public static void setThreadsPerWarp(int threadsPerWarp) {
		OrganizedThreadInfo.threadsPerWarp = threadsPerWarp;
	}

	private final Map<Integer, Map<Integer, Map<Integer, List<TwoThreadInfo>>>> blocks;

	private final List<TwoThreadInfo> tempList = new ArrayList<TwoThreadInfo>();

	public OrganizedThreadInfo() {
		blocks = new HashMap<Integer, Map<Integer, Map<Integer, List<TwoThreadInfo>>>>();
	}

	public void add(TwoThreadInfo twoThreadInfo) {
		tempList.add(twoThreadInfo);
	}

	public boolean isEmpty() {
		return blocks.isEmpty();
	}

	public void organize() {
		for (final TwoThreadInfo twoThreadInfo : tempList) {
			organize(twoThreadInfo, 0);
			organize(twoThreadInfo, 1);
		}
	}

	private void organize(TwoThreadInfo twoThreadInfo, int i) {
		ThreadInfo threadInfo;
		if (i == 0) {
			threadInfo = twoThreadInfo.getThreadInfo0();
		}
		else {
			threadInfo = twoThreadInfo.getThreadInfo1();
		}
		try {
			final int block = threadInfo.getBlock();
			final int thread = threadInfo.getThread();
			final int warp = thread / threadsPerWarp;
			if (blocks.containsKey(block)) {
				final Map<Integer, Map<Integer, List<TwoThreadInfo>>> warps = blocks.get(block);
				if (warps.containsKey(warp)) {
					final Map<Integer, List<TwoThreadInfo>> threads = warps.get(warp);
					if (threads.containsKey(thread)) {
						final List<TwoThreadInfo> threadInfos = threads.get(thread);
						threadInfos.add(twoThreadInfo);
					}
					else {
						final List<TwoThreadInfo> threadInfos = new ArrayList<TwoThreadInfo>();
						threadInfos.add(twoThreadInfo);
						threads.put(thread, threadInfos);
					}
				}
				else {
					final Map<Integer, List<TwoThreadInfo>> threads = new HashMap<Integer, List<TwoThreadInfo>>();
					final List<TwoThreadInfo> threadInfos = new ArrayList<TwoThreadInfo>();
					threadInfos.add(twoThreadInfo);
					threads.put(thread, threadInfos);
					warps.put(warp, threads);
				}
			}
			else {
				final Map<Integer, Map<Integer, List<TwoThreadInfo>>> warps = new HashMap<Integer, Map<Integer, List<TwoThreadInfo>>>();
				final Map<Integer, List<TwoThreadInfo>> threads = new HashMap<Integer, List<TwoThreadInfo>>();
				final List<TwoThreadInfo> threadInfos = new ArrayList<TwoThreadInfo>();
				threadInfos.add(twoThreadInfo);
				threads.put(thread, threadInfos);
				warps.put(warp, threads);
				blocks.put(block, warps);
			}
		} catch (final NumberFormatException nfe) {
			/*
			 * Just ignore this improperly formatted ThreadInfo object (not all of them are "properly" formatted after all)
			 */
		}
	}

	private void setupBlockTree(TreeItem topLevel, Map<Integer, Map<Integer, List<TwoThreadInfo>>> warps, int block,
			String lowLevelLabel, IProject project) {
		final TreeItem blockTree = new TreeItem(topLevel, SWT.NONE);
		blockTree.setText(Messages.BLOCK + block);

		final Set<Integer> keys = warps.keySet();
		final int[] keysArray = new int[keys.size()];
		final Iterator<Integer> iter = keys.iterator();
		int j;
		for (int i = 0; i < keysArray.length; i++) {
			j = iter.next();
			keysArray[i] = j;
		}
		Arrays.sort(keysArray);

		for (final int warp : keysArray) {
			setupWarpTree(blockTree, warps.get(warp), warp, lowLevelLabel, project);
		}
	}

	private void setupThreadInfoLeaf(TreeItem twoThreadTree, ThreadInfo threadInfo, IProject project) {
		try {
			final String label = threadInfo.getLabel(project);
			final TreeItem leaf = new TreeItem(twoThreadTree, SWT.NONE);
			leaf.setText(label);
			leaf.setData(threadInfo);
		} catch (final NumberFormatException nfe) {

		}
	}

	private void setupThreadTree(TreeItem warpTree, List<TwoThreadInfo> list, int thread, String lowLevelLabel, IProject project) {
		final TreeItem threadTree = new TreeItem(warpTree, SWT.NONE);
		threadTree.setText(Messages.THREAD_NUMBER + thread);

		for (final TwoThreadInfo twoThreadInfo : list) {
			setupTwoThreadInfoTree(threadTree, twoThreadInfo, lowLevelLabel, project);
		}
	}

	public void setupTree(Tree tree, String topLevelLabel, String emptyTopLevelLabel, String lowLevelLabel, IProject project) {
		tree.addListener(SWT.MouseDoubleClick, new Listener() {

			@Override
			public void handleEvent(Event event) {
				final Widget widget = event.widget;
				if (widget instanceof Tree) {
					final Tree tree = (Tree) widget;
					final TreeItem item = tree.getItem(new Point(event.x, event.y));
					final Object data = item.getData();
					if (data instanceof ThreadInfo) {
						final ThreadInfo info = (ThreadInfo) data;
						final IFile file = info.getFile();
						final int line = info.getLine();
						try {
							GIGUtilities.jumpToLine(file, line);
						} catch (final CoreException e) {
							StatusManager.getManager().handle(
									new Status(IStatus.ERROR, GIGPlugin.PLUGIN_ID, Messages.CORE_EXCEPTION, e));
						}
					}
					else if (data instanceof TwoThreadInfo) {
						final TwoThreadInfo twoInfo = (TwoThreadInfo) data;
						final IFile file = twoInfo.getFile();
						final int line = twoInfo.getLine();
						try {
							GIGUtilities.jumpToLine(file, line);
						} catch (final CoreException e) {
							StatusManager.getManager().handle(
									new Status(IStatus.ERROR, GIGPlugin.PLUGIN_ID, Messages.CORE_EXCEPTION, e));
						}
					}
				}
			}

		});
		if (blocks.size() == 0) {
			if (emptyTopLevelLabel != null) {
				final TreeItem topLevel = new TreeItem(tree, SWT.NONE);
				topLevel.setText(emptyTopLevelLabel);
			}
			else {
				return;
			}
		}
		else {
			final TreeItem topLevel = new TreeItem(tree, SWT.NONE);
			topLevel.setText(topLevelLabel);

			final Set<Integer> keys = blocks.keySet();
			final int[] keysArray = new int[keys.size()];
			final Iterator<Integer> iter = keys.iterator();
			int j;
			for (int i = 0; i < keysArray.length; i++) {
				j = iter.next();
				keysArray[i] = j;
			}
			Arrays.sort(keysArray);

			for (final int block : keysArray) {
				setupBlockTree(topLevel, blocks.get(block), block, lowLevelLabel, project);
			}
		}
	}

	private void setupTwoThreadInfoTree(TreeItem threadTree, TwoThreadInfo twoThreadInfo, String lowLevelLabel, IProject project) {
		final TreeItem twoThreadTree = new TreeItem(threadTree, SWT.NONE);
		twoThreadTree.setText(lowLevelLabel);
		twoThreadTree.setData(twoThreadInfo);

		setupThreadInfoLeaf(twoThreadTree, twoThreadInfo.getThreadInfo0(), project);
		setupThreadInfoLeaf(twoThreadTree, twoThreadInfo.getThreadInfo1(), project);
	}

	private void setupWarpTree(TreeItem blockTree, Map<Integer, List<TwoThreadInfo>> threads, int warp, String lowLevelLabel,
			IProject project) {
		final TreeItem warpTree = new TreeItem(blockTree, SWT.NONE);
		warpTree.setText(Messages.WARP_NUMBER + warp);

		final Set<Integer> keys = threads.keySet();
		final int[] keysArray = new int[keys.size()];
		final Iterator<Integer> iter = keys.iterator();
		int j;
		for (int i = 0; i < keysArray.length; i++) {
			j = iter.next();
			keysArray[i] = j;
		}
		Arrays.sort(keysArray);

		for (final int thread : keysArray) {
			setupThreadTree(warpTree, threads.get(thread), thread, lowLevelLabel, project);
		}
	}
}
